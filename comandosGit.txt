#### COMANDOS GENERALES #########
$ pwd //ubicacion actual
$ mkdir //crear directorio (nueva carpeta)
$ cp// copiar
$ mv// mover
$ rmdir// eliminar directorio
$ rm -r// eliminar directorio y su contenido
$ touch archivo.extencion//crear archivo vacio
$ cat archivo.extencion//muestra el contenido del archivo
$ ls //listado de carpetas en donde me encuentro 
$ history //historial de comandos utilizados durante esa sesion
$ rm archivo.extencion //eliminacion de archivo
$ comando --help //ayuda sobre el comando
$ checkout //traer cambios realizado
$ alias nombreNuevoComando="Comando a convertir"// Crear un alias para resumir comandos que sean muy extenso
$ sudo /opt/lampp/lampp start// iniciar servidor de base de datos
---------------------------------------------------------------------------------------------
######## COMANDOS GIT #########################
$ git init //inicializar el repositorio
$ git config --list //muestra la lista de configuracion de git
$ git config --global user.name "Nombre"// Configura nombre usuario
$ git config --global user.email "email"// Configura email usuario
$ git status// Muestra el estado de actual de los archivos ubicados en el área de stage
$ git add archivo.extencion //guardar archivo en staging
$ git add .// Agregar todos los cambios los archivos de la carpeta en la que nos encontramos
$ git commit -m “Mensaje”// Agregamos los cambios para el repositorio
$ git commit -am//funciona si les ha hecho $git add previamente.
                  Agrega todos los archivos desde el directorio de trabajo al repositorio local
$ git commit// Abrirá el editor Vim para poder agregar un comentario, siempre es obligatorio
               agregar un comentario para el commit. Para poder editar el comit usar "ESC i".
               Para guardar cambios ESC + SHIFT + Z Z
$ git commit --amend// permite remendar el commit anterior agregando cambios al archivo
----------------------------------------------------------------------------------------------
########## COMANDOS GITHUB #################
$ git clone url_del_servidor_remoto//permite descargar los archivos de la última versión
                             de la rama principal y todo el historial de cambios en la carpeta de trabajo y repositorio local
$ git remote add origin "llave ssh" o "url"/crear conexion con repositorio externo
$ git remote set-url origin url-ssh-del-repositorio-en-github// Con esto estaremos cambiando la url del repositorio en github.
$ git pull origin master//traer repositorio remoto de github al local
$ git pull origin master --alow-unrelated-histories// trae la versión del repositorio remoto y 
                hacer merge para crear un commit con los archivos de ambas partes.
$ git push origin master// Comando para enviar los cambios del repositorio local al repositorio remoto de github

$ git fetch//trae actualizaciones del repositorio remoto y lo guarda en nuestro repositorio local.
$ git merge//trae los últimos cambios del servidor remoto a nuestro directorio de trabajo.
----------------------------------------------------------------------------------------------
$ git log// Muestra el historial detallado con commit e id, de todos los commits en dicho repositorio
$ git diff commitA commitB //comparar versiones
$ git log --all --graph --decorate --oneline// ver el historial de cambios y ramas de forma más gráfica.
----------------------------------------------------------------------------------------------
#RAMAS
$ gitk// grafico de ramas del proyecyo
$ git branch -nombre de la rama-// crea una nueva rama
$ git branch -D nombreRama// se utiliza para eliminar ramas en git
$ git branch// mostrar ramas remotas
$ git branch// mostrar ramas del servidor
$ git checkout -nombre de la rama-//el head de traslada de una rama a otra.
$ git checkout -b rama// Crea una rama y nos mueve a ella automáticamente, 
                        Es decir, es la combinación de git brach y git checkout al mismo tiempo.
$ git merge “nombre de la rama que se quiere fusionar”// une dos ramas del repositorio
$ git rebase <nombre-rama-a-desaparecer>// aplica los cambios a la rama sin que los mismos se registren
$ git rebase <rama-principal>//
$ git rebase --abort// eiminar cambios

$ git stash// guardar el trabajo el cual no es necesario hacer un commit aun 
$ git stash list// muestra los archivos del stash
$ git stash pop// trae los cambios que se encuentran guardados en el stash
$ git stash drop// elimina los archivos del stash

$ git clean -dry -run// muestra los archivos nuevos a eliminar
$ git clean -f// elimina los archivos mostrados
------------------------------------------------------------------------------------------------
#VOLVER EN EL TIEMPO
--nos deja ir, mirar, pasear y volver.
$ git checkout + ID del commit //Podemos volver a cualquier versión anterior de un archivo específico 
                                o incluso del proyecto entero. Esta también es la forma de crear ramas
                                 y movernos entre ellas
--eliminar archivos de Git sin eliminar su historial del sistema de versiones.
$ git rm --cached// Elimina los archivos del área de Staging y del próximo commit pero los mantiene 
                    en nuestro disco duro.
$ git rm --force// Elimina los archivos de Git y del disco duro. Git siempre guarda todo, 
                    por lo que podemos acceder al registro de la existencia de los archivos, 
                    de modo que podremos recuperarlos si es necesario (pero debemos usar comandos más avanzados).
-- volvemos al pasado sin la posibilidad de volver al futuro
$ git reset + ID del commit + --hard// Borra todo. Todo todito, absolutamente todo. Toda la información
                                     de los commits y del área de staging se borra del historial.
$ git reset + ID del commit + --soft// Borramos todo el historial y los registros de Git pero guardamos
                                     los cambios que tengamos en Staging, así podemos aplicar las 
                                     últimas actualizaciones a un nuevo commit.
$ git reset HEAD// sacar archivos del área de Staging. No para borrarlos ni nada de eso, 
                    solo para que los últimos cambios de estos archivos no se envíen al último commit
                     a menos que cambiemos de opinión y los incluyamos de nuevo en staging con git add
---------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------
########### CONFIGURACION LLAVES DE GITHUB: SSH ###############
primer  paso: configurar email
$ git init //inicializar el repositorio
$ git config --global user.name "Nombre"// Configura nombre usuario
$ git config --global user.email "email"// Configura email usuario

segundo paso: Generar una nueva llave SSH: (Windows O Linux)
$ ssh-keygen -t rsa -b 4096 -C "youremail@example.com"
Comprobar proceso 
eval $(ssh-agent -s)
ssh-add ~/.ssh/id_rsa

tercer paso: agregar llave publica a github
$ cat ~/.ssh/is_rsa.pub
copiar texto e ir a la configuracion de github
en el panel izquierdo elegir pestaña de llaves ssh
y agregar llave publica 
------------------------------------------------------------------------------------------------
#TAGS 
$ git tag -a nombre-del-tag id-del-commit// Crear un nuevo tag y asignarlo a un commit 
$ git tag -d nombre-del-tag// Borrar un tag en el repositorio local
$ git tag o git show-ref --tags// Listar los tags de nuestro repositorio local
$ git push origin --tags//Publicar en el repositorio remoto un tag

¿GitHub es?
¿Las llaves públicas son?
Se crean dos archivos cuando creas una llave pública y privada para SSH, ¿cuál es la extensión de la llave privada?
En un repositorio público en GitHub, ¿qué puede hacer los colaboradores?
El dueño de un repositorio al ver un pull request puede:
Cuando hago un fork de un proyecto en GitHub, ¿lo que logro es?
¿Cuándo deberías usar cherry-pick?
Estás en la rama master y quieres mandar los últimos cambios que guardaste con git stash a la rama retomando-los-cambios (la rama no ha sido creada aún). ¿Cuál de las siguientes soluciones es incorrecta?
¿Cuál es la diferencia entre git rm y git reset HEAD?